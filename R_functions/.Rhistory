source("R_functions/adjscores_A2022_v9.R")
rm(list=ls())
source("R_functions/sim.norm.data.R")
source("R_functions/sample.demo.unif.R")
source("R_functions/sample.coef.unif.R")
source("R_functions/sample.transf.R")
source("R_functions/adjscores_C1987.R")
source("R_functions/adjscores_A2023.R")
source("R_functions/model_text.R")
source("R_functions/model_text_transf.R")
library(effects)
n.subj.train = 100 # number of subjects in each train set (i.e., the normative data)
True_score.mult = 1 # a multiplier to have an effect of noise (in terms of error), not influenced by the observed score range in the simulation.
## coefficients parameters
c.range = list(c(10, 12), c(-0.05, -0.1), c(0.05, 0.1), c(-0.01, 0.01), c(-0.005, -0.001), c(0.001, 0.005))
c.steps = c(100,100,100,100,100, 100)
eff_mult = c(1, 1, 1, 0.5, 1, 1) #
age.include.transf = NULL
age.exclude.transf = NULL #c("quadr", "cube")
edu.include.transf = NULL
edu.exclude.transf = NULL #c("quadr", "cube")
## SIMULATE NORMATIVE DATA
## 1) simulate data with real adj score
train.demo.data = sample.demo.unif(n.subj.train)
train.coefs = sample.coef.unif(c.range = c.range,
c.steps=c.steps)
train.age_transf = sample.transf(include_transf = age.include.transf, exclude_transf = age.exclude.transf)
train.edu_transf = sample.transf(include_transf = edu.include.transf, exclude_transf = edu.exclude.transf)
train.res = sim.norm.data_v2(n = n.subj.train,
coefs = train.coefs,
True_score.mult = True_score.mult,
eff_mult = eff_mult,
age_values_o =  train.demo.data$age_values_o,
edu_values_o = train.demo.data$edu_values_o,
sex_values_o = train.demo.data$sex_values_o,
age_transf = train.age_transf,
edu_transf = train.edu_transf,
details=TRUE)
train.dat = train.res[[1]]
# Results with Capitani fitting method
CAP.res = adjscores_C1987(df=train.dat, dep="Obs_score",
age="Age", edu="Edu", sex="Sex",
dep.range = c(0, max(train.dat$Obs_score)))
summary(CAP.res$lm.model)
ARC.res = adjscores_A2023_v2(df = train.dat, dep="Obs_score",
age="Age", edu="Edu", sex="Sex_n",
dep.range = c(0, max(train.dat$Obs_score)),
NULL)
# return ground truth
print(train.res[[2]])
# return formula with Capitani
print(CAP.res$model_text)
print(CAP.res$transfs)
summary(CAP.res$lm.model)
print(ARC.res$model_text)
print(ARC.res$transfs)
summary(ARC.res$lm.model)
plot(allEffects(ARC.res$lm.model, partial.residuals=T))
plot(allEffects(CAP.res$lm.model, partial.residuals=T))
paste("CAP =", round(summary(CAP.res$lm.model)$r.squared, 2))
paste("ARC =", round(summary(ARC.res$lm.model)$r.squared, 2))
### MAIN SCRIPT
# this script regulates the main values used for the simulation the article
# Arcara G. (2024) Improving ES.
rm(list=ls())
# the possible values of number of subjects on which normative data are built
sample_size_values = c(100, 300, 500, 700) # Number of participant of normative Data
noise_values = c(1, 2, 3)
sample_demo_fun_values = c("sample.demo.cond", "sample.demo.unif")
Capitani_ver_values = c("v1", "v2")
Arcara_ver_values = c("v1", "v2", "v3")
output_folder = "Analysis1/"
dir.create(paste("Results/", output_folder, sep=""))
## create lists of combinations before running the script (useful if it kills to restart)
loop_list = list(NULL)
length(loop_list) = length(sample_size_values)*length(noise_values)*length(Capitani_ver_values)*length(Arcara_ver_values)*length(sample_demo_fun_values)
k = 1
### Create loop list
for (sample_size in sample_size_values){
for (noise_level in noise_values){
for (Arcara_ver in Arcara_ver_values){
for (Capitani_ver in Capitani_ver_values){
for (sample_demo_fun in sample_demo_fun_values){
loop_list[[k]] = list(sample_size = sample_size, noise_level=noise_level,
Arcara_ver=Arcara_ver, Capitani_ver=Capitani_ver, sample_demo_fun=sample_demo_fun)
print(k)
k=k+1
}
}
}
}
}
n_start=1
for (iLoop in n_start:length(loop_list)){
curr_loop = loop_list[[iLoop]]
assign("n.subj.train", curr_loop$sample_size, env=.GlobalEnv)
assign("True_score.mult", curr_loop$noise_level, env=.GlobalEnv)
assign("sample_demo_fun", curr_loop$sample_demo_fun, env=.GlobalEnv )
assign("Arcara_ver", curr_loop$Arcara_ver, env=.GlobalEnv)
assign("Capitani_ver", curr_loop$Capitani_ver, env=.GlobalEnv)
print(iLoop)
source("R_scripts/Analysis1/STEP2_simulation.R", local=FALSE, verbose = F)
}
8.30+5.42
14/39
log(0)
length(all_models_functs) = length(age_funct_list)*length(edu_funct_list)
dredge
library(dredge)
